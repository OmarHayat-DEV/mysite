---
title: "Day 1"
date: 2024-04-08 
author:
  - name: Omar Hayat 

# abstract: > 
#  The characteristic theme of the works of Stone is 
#  the bridge between culture and society. ...
  
keywords:
  - Leetcode
  - SQL
  
categories: [leetcode, sql]

format: html

---

# Outline

- **LC 5 Longest Palindromic Substring**
	- Solution - python

- **LC 185 Department Top Three Salaries**
	- Solution - SQL
	- Solution - pandas

# LC 5 Longest Palindromic Substring 
___
<a  onclick="window.open('https://leetcode.com/problems/longest-palindromic-substring/description/')" style="cursor: pointer;">**Link**</a>

Given a string `s`, return the longest palindromic substring  in `s`. 

**Example 1:**

**Input:** s = "babad" <br>
**Output:** "bab" <br>
**Explanation:** "aba" is also a valid answer. <br>

**Example 2:**

**Input:** s = "cbbd" <br>
**Output:** "bb" <br>


### Solution - python
___

1. Recall what it means to be a `palindrome` :
	- the string `s` is the same forwards as it is backwards <br>
	- each palindrome has a centre <br>
		- for *odd* palindromes, the centre is of the form : (str)-(char)-(str) 
		- for *even* palindromes, the centre is of the form : (str)-(char)(char)-(str)
2. Each character in the string `s`, namely `s[i]`, is a candidate for the centre for longest palindromic substring
3. Each adjacent pair of characters in the string `s`, namely `s[i:i+1]`, is a candidate for the centre for longest palindromic substring
4. Consider the $n\,\times\,n$ matrix, where each entry $a_{ij}$ corresponds to the substring of `s` starting at $i\text{-th}$ character in `s` and ending at the $j\text{-th}$ character in `s`
	- $$\begin{bmatrix}\;\; s _{00} & \dots & s _{0n}  \;\; \\ \;\; * & \ddots & \vdots  \;\; \\  \;\; * & * & s _{n n}  \;\; \end{bmatrix}$$
	- For example 
		- $s _{00} = s[0]$
		- $s _{0n} = s$
		- $s _{n n} = s[-1]$
	- **Note:** The entries $s _{ij}\,$ where $i<j$ carry no interpretation 
5. Now, assign to each entry $s _{ij}\,$ a boolean value, which is *true* if the substring represented by $s _{ij}\,$ is a palindrome and *false* if the substring represented by $s _{ij}\,$ is not a palindrome
6. Clearly, all entries of the form $s _{i i}\,$ are assigned true, because they representing the character at position $i$ in the string `s` 
7. Entries of the form $s _{i(i+1)}\,$ are assigned true only when $s[i]=s[i+1]\,$ 
8. Consider the sub-matrix
	- $$\begin{bmatrix}\;\; s _{i(j-1)} & \textcolor{blue}{s _{ij}}  \;\; \\ \;\;  s _{(i+1)(j-1)} & s _{(i+1)j} \;\;  \end{bmatrix}$$
	- the substring $\color{blue}s _{ij}$ is only a palindrome if $s[i]=s[j]$ and the substring $s _{(i+1)(j-1)}$ is a palindrome
	- Visually it looks like this:
	- $$\color{red}s_{i}\color{blue}\underbrace{{s _{i+1}\dots s _{j-1}}}_{s _{(i+1)(j-1)}} \color{red}s_{j}$$
9. To answer the question, *is this substring a palindrome* for any substring $\color{blue}s _{ij}\,$ we check if the $s _{(i+1)(j-1)}$ entry in the matrix is true and if $s[i]=s[j]$
10. **Algorithm**

```python
	def longestPalindrome(self,s)->str:
		    n = len(s)
		    memo = [[False]*n for _ in range(n)]
		    res = [0,0]
		
		    for i in range(n):
		        memo[i][i] = True
		
		    for i in range(n-1):
		        if s[i]==s[i+1]:
		            memo[i][i+1]=True
		            res = [i,i+1]
	
			# offset from the main diagonal ranging from 2 to n-1
		    for offset in range(2,n):
				# the offset diagonal starts at position offset
				# meaning we can only go down the diagonal n-offset steps
			    steps = n-offset
		        for i in range(steps):
		            j = i + offset
		            if s[i] == s[j] and memo[i+1][j-1]:
		                memo[i][j] = True
		                res = [i,j]
		
		    i,j = res
		    return s[i:j+1]
```

- initialize an $n \,\times\,n$ matrix where $n\,$ is the length of the string $s$
	- initialize its entries to false
	- this will be our memo-table to store information about the palindromic status of substrings
- initialize a list of length 2 called `res`
	- to store the longest encountered palindromic substring
- set the diagonal of the matrix to true
- set the substrings of length 2 to true if they are a palindrome 
- set the substrings of length 3 to $n\,$ to true if they are palindromic
- **Note** we follow a diagonal pattern to accomplish this
	- our first loop fills the main diagonal
	- $$\begin{bmatrix}\;\; \textcolor{blue}{s _{00}} & \dots & s _{0n}  \;\; \\ \;\; * & \textcolor{blue}{\ddots} & \vdots  \;\; \\  \;\; *  & *  & \textcolor{blue}{s _{n n}}  \;\; \end{bmatrix}$$
	- our second loop fills the first off diagonal right of the main
	- $$ \begin{bmatrix}\;\; s _{00} & \textcolor{blue}{s _{01}} & \dots & s _{0n}  \;\; \\ \;\; * & \ddots & \textcolor{blue}{\ddots}  & \vdots  \;\; \\ \;\; * & *  & \ddots  & \textcolor{blue}{s _{(n-1)n}}  \;\; \\ \;\; *  & *  & * & s _{n n}  \;\; \end{bmatrix}$$
	- our third loop fills from the third off diagonal right of the main to the n-th diagonal right of the main 
- we keep track of the  longest substring with `res`
	- we do not need to check while we loop if `res` is longer than the current substring
	- because we each loop we check for substrings of a greater length

# LC 185 Department Top Three Salaries
___
Table: `Employee`


		+--------------+---------+
		| Column Name  | Type    |
		+--------------+---------+
		| id           | int     |
		| name         | varchar |
		| salary       | int     |
		| departmentId | int     |
		+--------------+---------+
		id is the primary key (column with unique values) for this table.
		departmentId is a foreign key (reference column) of the ID from the `Department` table.
		Each row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.

Table: `Department`

		+-------------+---------+
		| Column Name | Type    |
		+-------------+---------+
		| id          | int     |
		| name        | varchar |
		+-------------+---------+
		id is the primary key (column with unique values) for this table.
		Each row of this table indicates the ID of a department and its name.

A company's executives are interested in seeing who earns the most money in each of the company's departments. A **high earner** in a department is an employee who has a salary in the **top three unique** salaries for that department.

Write a solution to find the employees who are **high earners** in each of the departments.

Return the result table **in any order**.

**Example 1:**

**Input:** 

Employee table:

		+----+-------+--------+--------------+
		| id | name  | salary | departmentId |
		+----+-------+--------+--------------+
		| 1  | Joe   | 85000  | 1            |
		| 2  | Henry | 80000  | 2            |
		| 3  | Sam   | 60000  | 2            |
		| 4  | Max   | 90000  | 1            |
		| 5  | Janet | 69000  | 1            |
		| 6  | Randy | 85000  | 1            |
		| 7  | Will  | 70000  | 1            |
		+----+-------+--------+--------------+


Department table:

		+----+-------+
		| id | name  |
		+----+-------+
		| 1  | IT    |
		| 2  | Sales |
		+----+-------+

**Output:** 

		+------------+----------+--------+
		| Department | Employee | Salary |
		+------------+----------+--------+
		| IT         | Max      | 90000  |
		| IT         | Joe      | 85000  |
		| IT         | Randy    | 85000  |
		| IT         | Will     | 70000  |
		| Sales      | Henry    | 80000  |
		| Sales      | Sam      | 60000  |
		+------------+----------+--------+

		Explanation:
		In the IT department:
		- Max earns the highest unique salary
		- Both Randy and Joe earn the second-highest unique salary
		- Will earns the third-highest unique salary

In the Sales department:
- Henry earns the highest salary
- Sam earns the second-highest salary
- There is no third-highest salary as there are only two employees

### Solution - SQL
___

The **dense_rank()** function lets us give a ranking to each row. Used along with the **partition by** clause we can for each department, rank the salaries in that department. 

Then we can select from this temporary table, those individuals who rank in the top three in their departments.

```SQL
with ranked_salaries as
(
	select 
		d.name as department,
		e.name as employee,
		e.salary as salary,
		dense_rank() over (partition by
								d.name
							order by
							e.salary desc) as salary_rank
	from 
		employee as e
		inner join
		department as d
		on
		e.departmentId = d.Id
)

select 
	department,
	employee,
	salary
from
	ranked_salaries
where
	salary_rank <= 3

```

### Solution - pandas
___

We make use of the **.groupby()** and **.rank()** method to add a column to our `employee` table ranking each employee by their salary in their department.

Next we apply a sequence of common pandas methods:

1. Perform an *inner join* with the **.merge()** method
	- *right* : specifies the table to perform the join on oriented as the right table
	- *how* : specifies the type of join to perform (common types being inner, outer, full, left, right)
	- *left_on* : column from the left oriented table to perform the join on
	- *right_on* : column from the right oriented table to perform the join on
	- *suffixes* : adds a suffix to the columns in common between the two tables
2. Query with the **.query()** method to only select columns with rank less than or equal to 3
3. Rename the columns of interest with the **.rename()** method
	- *columns* : takes a dictionary to specify new column name
4. Select the columns of interest from the pd.DataFrame object
	- *< pd.DataFrame object >* **[ < list of columns > ]** 

```python
def top_three_salaries(employee: pd.DataFrame, department: pd.DataFrame)->pd.DataFrame:

	# Rank salary grouped by department
    employee['rank'] = (
                        employee
                        .groupby('departmentId')
                        .salary
                        .rank(ascending=False,method='dense')
                        )
                        
    return (
            employee
            .merge(
                right=department, 
                how='inner', 
                left_on='departmentId', 
                right_on='id',
                suffixes=['_emp','_dep'])
            .query('rank <= 3')
            .rename(columns={
                            'name_emp':'Employee', 
                            'salary':'Salary',
                            'name_dep':'Department'})
            [['Department','Employee','Salary']]
            )
```
