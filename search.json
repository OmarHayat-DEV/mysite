[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Daily Problems",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nApr 9, 2024\n\n\nDay 2\n\n\nOmar Hayat\n\n\n\n\nApr 8, 2024\n\n\nDay 1\n\n\nOmar Hayat\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024_04/09.html",
    "href": "posts/2024_04/09.html",
    "title": "Day 2",
    "section": "",
    "text": "Outline\n\nLC 647 Palindromic Substring\nLC 262 Trips and Users\n\n\n\nLC 647 Palindromic Substring\nLink\nGiven a string s, return the number of palindromic substrings in it.\nA string is a palindrome when it reads the same backward as forward.\nA substring is a contiguous sequence of characters within the string."
  },
  {
    "objectID": "posts/2024_04/08.html",
    "href": "posts/2024_04/08.html",
    "title": "Day 1",
    "section": "",
    "text": "Outline\n\nLC 5 Longest Palindromic Substring\n\nSolution - python\n\nLC 185 Department Top Three Salaries\n\nSolution - SQL\nSolution - pandas\n\n\n\n\nLC 5 Longest Palindromic Substring\n\nLink\nGiven a string s, return the longest palindromic substring in s.\nExample 1:\nInput: s = “babad”  Output: “bab”  Explanation: “aba” is also a valid answer. \nExample 2:\nInput: s = “cbbd”  Output: “bb” \n\nSolution - python\n\n\nRecall what it means to be a palindrome :\n\nthe string s is the same forwards as it is backwards \neach palindrome has a centre \n\nfor odd palindromes, the centre is of the form : (str)-(char)-(str)\nfor even palindromes, the centre is of the form : (str)-(char)(char)-(str)\n\n\nEach character in the string s, namely s[i], is a candidate for the centre for longest palindromic substring\nEach adjacent pair of characters in the string s, namely s[i:i+1], is a candidate for the centre for longest palindromic substring\nConsider the \\(n\\,\\times\\,n\\) matrix, where each entry \\(a_{ij}\\) corresponds to the substring of s starting at \\(i\\text{-th}\\) character in s and ending at the \\(j\\text{-th}\\) character in s\n\n\\[\\begin{bmatrix}\\;\\; s _{00} & \\dots & s _{0n}  \\;\\; \\\\ \\;\\; * & \\ddots & \\vdots  \\;\\; \\\\  \\;\\; * & * & s _{n n}  \\;\\; \\end{bmatrix}\\]\nFor example\n\n\\(s _{00} = s[0]\\)\n\\(s _{0n} = s\\)\n\\(s _{n n} = s[-1]\\)\n\nNote: The entries \\(s _{ij}\\,\\) where \\(i&lt;j\\) carry no interpretation\n\nNow, assign to each entry \\(s _{ij}\\,\\) a boolean value, which is true if the substring represented by \\(s _{ij}\\,\\) is a palindrome and false if the substring represented by \\(s _{ij}\\,\\) is not a palindrome\nClearly, all entries of the form \\(s _{i i}\\,\\) are assigned true, because they representing the character at position \\(i\\) in the string s\nEntries of the form \\(s _{i(i+1)}\\,\\) are assigned true only when \\(s[i]=s[i+1]\\,\\)\nConsider the sub-matrix\n\n\\[\\begin{bmatrix}\\;\\; s _{i(j-1)} & \\textcolor{blue}{s _{ij}}  \\;\\; \\\\ \\;\\;  s _{(i+1)(j-1)} & s _{(i+1)j} \\;\\;  \\end{bmatrix}\\]\nthe substring \\(\\color{blue}s _{ij}\\) is only a palindrome if \\(s[i]=s[j]\\) and the substring \\(s _{(i+1)(j-1)}\\) is a palindrome\nVisually it looks like this:\n\\[\\color{red}s_{i}\\color{blue}\\underbrace{{s _{i+1}\\dots s _{j-1}}}_{s _{(i+1)(j-1)}} \\color{red}s_{j}\\]\n\nTo answer the question, is this substring a palindrome for any substring \\(\\color{blue}s _{ij}\\,\\) we check if the \\(s _{(i+1)(j-1)}\\) entry in the matrix is true and if \\(s[i]=s[j]\\)\nAlgorithm\n\n    def longestPalindrome(self,s)-&gt;str:\n            n = len(s)\n            memo = [[False]*n for _ in range(n)]\n            res = [0,0]\n        \n            for i in range(n):\n                memo[i][i] = True\n        \n            for i in range(n-1):\n                if s[i]==s[i+1]:\n                    memo[i][i+1]=True\n                    res = [i,i+1]\n    \n            # offset from the main diagonal ranging from 2 to n-1\n            for offset in range(2,n):\n                # the offset diagonal starts at position offset\n                # meaning we can only go down the diagonal n-offset steps\n                steps = n-offset\n                for i in range(steps):\n                    j = i + offset\n                    if s[i] == s[j] and memo[i+1][j-1]:\n                        memo[i][j] = True\n                        res = [i,j]\n        \n            i,j = res\n            return s[i:j+1]\n\ninitialize an \\(n \\,\\times\\,n\\) matrix where \\(n\\,\\) is the length of the string \\(s\\)\n\ninitialize its entries to false\nthis will be our memo-table to store information about the palindromic status of substrings\n\ninitialize a list of length 2 called res\n\nto store the longest encountered palindromic substring\n\nset the diagonal of the matrix to true\nset the substrings of length 2 to true if they are a palindrome\nset the substrings of length 3 to \\(n\\,\\) to true if they are palindromic\nNote we follow a diagonal pattern to accomplish this\n\nour first loop fills the main diagonal\n\\[\\begin{bmatrix}\\;\\; \\textcolor{blue}{s _{00}} & \\dots & s _{0n}  \\;\\; \\\\ \\;\\; * & \\textcolor{blue}{\\ddots} & \\vdots  \\;\\; \\\\  \\;\\; *  & *  & \\textcolor{blue}{s _{n n}}  \\;\\; \\end{bmatrix}\\]\nour second loop fills the first off diagonal right of the main\n\\[ \\begin{bmatrix}\\;\\; s _{00} & \\textcolor{blue}{s _{01}} & \\dots & s _{0n}  \\;\\; \\\\ \\;\\; * & \\ddots & \\textcolor{blue}{\\ddots}  & \\vdots  \\;\\; \\\\ \\;\\; * & *  & \\ddots  & \\textcolor{blue}{s _{(n-1)n}}  \\;\\; \\\\ \\;\\; *  & *  & * & s _{n n}  \\;\\; \\end{bmatrix}\\]\nour third loop fills from the third off diagonal right of the main to the n-th diagonal right of the main\n\nwe keep track of the longest substring with res\n\nwe do not need to check while we loop if res is longer than the current substring\nbecause we each loop we check for substrings of a greater length\n\n\n\n\n\nLC 185 Department Top Three Salaries\n\nTable: Employee\n    +--------------+---------+\n    | Column Name  | Type    |\n    +--------------+---------+\n    | id           | int     |\n    | name         | varchar |\n    | salary       | int     |\n    | departmentId | int     |\n    +--------------+---------+\n    id is the primary key (column with unique values) for this table.\n    departmentId is a foreign key (reference column) of the ID from the `Department` table.\n    Each row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\nTable: Department\n    +-------------+---------+\n    | Column Name | Type    |\n    +-------------+---------+\n    | id          | int     |\n    | name        | varchar |\n    +-------------+---------+\n    id is the primary key (column with unique values) for this table.\n    Each row of this table indicates the ID of a department and its name.\nA company’s executives are interested in seeing who earns the most money in each of the company’s departments. A high earner in a department is an employee who has a salary in the top three unique salaries for that department.\nWrite a solution to find the employees who are high earners in each of the departments.\nReturn the result table in any order.\nExample 1:\nInput:\nEmployee table:\n    +----+-------+--------+--------------+\n    | id | name  | salary | departmentId |\n    +----+-------+--------+--------------+\n    | 1  | Joe   | 85000  | 1            |\n    | 2  | Henry | 80000  | 2            |\n    | 3  | Sam   | 60000  | 2            |\n    | 4  | Max   | 90000  | 1            |\n    | 5  | Janet | 69000  | 1            |\n    | 6  | Randy | 85000  | 1            |\n    | 7  | Will  | 70000  | 1            |\n    +----+-------+--------+--------------+\nDepartment table:\n    +----+-------+\n    | id | name  |\n    +----+-------+\n    | 1  | IT    |\n    | 2  | Sales |\n    +----+-------+\nOutput:\n    +------------+----------+--------+\n    | Department | Employee | Salary |\n    +------------+----------+--------+\n    | IT         | Max      | 90000  |\n    | IT         | Joe      | 85000  |\n    | IT         | Randy    | 85000  |\n    | IT         | Will     | 70000  |\n    | Sales      | Henry    | 80000  |\n    | Sales      | Sam      | 60000  |\n    +------------+----------+--------+\n\n    Explanation:\n    In the IT department:\n    - Max earns the highest unique salary\n    - Both Randy and Joe earn the second-highest unique salary\n    - Will earns the third-highest unique salary\nIn the Sales department: - Henry earns the highest salary - Sam earns the second-highest salary - There is no third-highest salary as there are only two employees\n\nSolution - SQL\n\nThe dense_rank() function lets us give a ranking to each row. Used along with the partition by clause we can for each department, rank the salaries in that department.\nThen we can select from this temporary table, those individuals who rank in the top three in their departments.\nwith ranked_salaries as\n(\n    select \n        d.name as department,\n        e.name as employee,\n        e.salary as salary,\n        dense_rank() over (partition by\n                                d.name\n                            order by\n                            e.salary desc) as salary_rank\n    from \n        employee as e\n        inner join\n        department as d\n        on\n        e.departmentId = d.Id\n)\n\nselect \n    department,\n    employee,\n    salary\nfrom\n    ranked_salaries\nwhere\n    salary_rank &lt;= 3\n\n\nSolution - pandas\n\nWe make use of the .groupby() and .rank() method to add a column to our employee table ranking each employee by their salary in their department.\nNext we apply a sequence of common pandas methods:\n\nPerform an inner join with the .merge() method\n\nright : specifies the table to perform the join on oriented as the right table\nhow : specifies the type of join to perform (common types being inner, outer, full, left, right)\nleft_on : column from the left oriented table to perform the join on\nright_on : column from the right oriented table to perform the join on\nsuffixes : adds a suffix to the columns in common between the two tables\n\nQuery with the .query() method to only select columns with rank less than or equal to 3\nRename the columns of interest with the .rename() method\n\ncolumns : takes a dictionary to specify new column name\n\nSelect the columns of interest from the pd.DataFrame object\n\n&lt; pd.DataFrame object &gt; [ &lt; list of columns &gt; ]\n\n\ndef top_three_salaries(employee: pd.DataFrame, department: pd.DataFrame)-&gt;pd.DataFrame:\n\n    # Rank salary grouped by department\n    employee['rank'] = (\n                        employee\n                        .groupby('departmentId')\n                        .salary\n                        .rank(ascending=False,method='dense')\n                        )\n                        \n    return (\n            employee\n            .merge(\n                right=department, \n                how='inner', \n                left_on='departmentId', \n                right_on='id',\n                suffixes=['_emp','_dep'])\n            .query('rank &lt;= 3')\n            .rename(columns={\n                            'name_emp':'Employee', \n                            'salary':'Salary',\n                            'name_dep':'Department'})\n            [['Department','Employee','Salary']]\n            )"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Omar Hayat",
    "section": "",
    "text": "I am an incoming MMath in Computational Mathematics student at the University of Waterloo in Fall 2024.\nI am co-supervised by Dr. Giang Tran and Dr. Saeed Ghadimi.\nThe research focus of my masters is in stochastic optimization and machine learning.\n\nBrief background\nThe seminal experience that led me to pursue graduate studies came from an undergraduate course on mathematical foundations and logic. There, I first internalized the importance of formal theories of mathematics and their axiomatic approach.\nI felt I finally ‘got it’, the importance of having good axioms and developing theories from them. They help us say interesting things about the world.\nIn fact, I would go further and claim in order to say anything interesting about the world, we need some formal theory to ground it in. Luckily, mathematics offers a framework for other fields to adopt for their use cases.\nIndeed, all areas of science, engineering, and the humanities have used mathematics to say something interesting about our world.\nMathematics is ubiquitous and will remain ubiquitous.\nAfter that course, I realized I wanted to study more mathematics and so, I changed my program. I went from being an accomplished engineering student on a well defined path to a mathematics student with less clear prospects.\nI did know I wanted to pursue graduate school, but as a third year student who had not planned for it, I felt the pressure of uncertainty.\nWith some effort (and luck) I now find myself about to attend graduate school.\nI feel incredibly grateful for this opportunity to nurture my curiosity and I’m excited to make the most of it.\n\n\n\nEDUCATION\n  University of Waterloo    Masters of Mathematics, Computational Mathematics  Sep 2024 — Dec 2025 | Waterloo, ON  \n University of Ottawa   Bachelors of Science, Computer Science and Mathematics  Sep 2018 — May 2023 | Ottawa, ON  \n\n\nWork Experience\n Data Engineering Intern   National Research Council of Canada — Automotive and Surface Transportation Centre   May 2022 — Dec 2022 | Ottawa, ON   \n Data Science Intern   Financial Transactions and Reports Analysis Centre of Canada (FINTRAC)   Sep 2021 — Dec 2021 | Ottawa,ON   \n Data Science Intern    Novartis Pharmaceuticals    May 2020 — Dec 2020 | Remote  \n\n\n\nExtra Curricular Experience\n Software Engineering Team Lead   Engineering Competition Team — UO Supermileage   Sep 2021 — Sep 2022  \n Printed Circuit Board Designer   Engineering Competition Team — UO Supermileage   Jan 2019 — Sep 2021"
  }
]